{{ if eq .chezmoi.os "linux" -}}
#!/bin/bash

# Install Rg
command -v rg || sudo apt install ripgrep

# check git
if command -v git 
then
	# install git-delta
	if ! command -v delta ; then
	(
		set -e
		wget https://github.com/dandavison/delta/releases/download/0.12.1/delta-0.12.1-x86_64-unknown-linux-musl.tar.gz  -P ~/Downloads/
		mkdir -p ~/bin/delta-folder
		tar xvfz ~/Downloads/delta-0.12.1-x86_64-unknown-linux-musl.tar.gz -C ~/bin/delta-folder	
		ln -s ~/bin/delta-folder/delta-0.12.1-x86_64-unknown-linux-musl/delta ~/bin/delta

		# modify .gitconfig
		declare -A ar
		ar=( \
			["core.pager"]="delta" \
			["interactive.difffilter"]="delta --color-only" \
			["delta.navigate"]=true \
			["merge.conflictstyle"]=diff3 \
			["diff.colormoved"]=default )
		for key in "${!ar[@]}"; do 
			git config -f ~/.gitconfig $key "${ar[$key]}" 
		done
	) || echo "delta installation [❌]" 
	fi
fi

# check fd 
if ! command -v fd ; then
	( 
	wget https://github.com/sharkdp/fd/releases/download/v8.3.2/fd-v8.3.2-x86_64-unknown-linux-musl.tar.gz -P ~/Downloads/
	mkdir -p ~/bin/fd-folder
	tar xvfz ~/Downloads/fd-v8.3.2-x86_64-unknown-linux-musl.tar.gz -C ~/bin/fd-folder	
	ln -s ~/bin/fd-folder/fd-v8.3.2-x86_64-unknown-linux-musl/fd ~/bin/fd
	) || echo "fd install failed"
fi

# check fzf 
if ! command -v fzf ; then
	( 
	wget https://github.com/junegunn/fzf/releases/download/0.35.1/fzf-0.35.1-linux_amd64.tar.gz -P ~/Downloads/
	mkdir -p ~/bin/fzf-folder
	tar xvfz ~/Downloads/fzf-0.35.1-linux_amd64.tar.gz -C ~/bin/fzf-folder	
	wget https://raw.githubusercontent.com/junegunn/fzf/master/shell/key-bindings.bash -P ~/bin/fzf-folder
	wget https://raw.githubusercontent.com/junegunn/fzf/master/shell/completion.bash -P ~/bin/fzf-folder
	ln -s ~/bin/fzf-folder/fzf ~/bin/fzf
	) || echo "fzf install failed"
fi

# check nvm
if ! command -v nvm ; then
	( 
	wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | PROFILE="/dev/null" bash 

	) || echo "nvm install failed" 
	
	export NVM_DIR="$HOME/.nvm"
	[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
	[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
fi
# check nodeJs
if ! command -v node ; then
	( 
	nvm use 14 || nvm install 14 ; nvm use 14 	
	) || echo "node install failed" 
fi

# check neovim
if ! command -v nvim ; then
	(
	wget https://github.com/neovim/neovim/releases/latest/download/nvim.appimage -P ~/bin/
	cd ~/bin
	chmod u+x nvim.appimage
	ln -s nvim.appimage nvim
	) || echo "neovim install failed [❌]"
fi

# Install vimplug
if command -v vim && [[ ! -f  ~/.vim/autoload/plug.vim ]] ; then
	(
	echo "INSTALLING VIMPLUG for VIM"
	curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
		https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim 

	)
fi
if command -v nvim && [[ ! -f "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim ]] ; then
	(
	echo "INSTALLING VIMPLUG for NeoVIM"
	# Original is sh -c '<commad>'
	curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
       https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	)
fi

# check ranger
if ! command -v ranger ; then
	(
	pip3 install --user ranger-fm
	) || echo  "ranger install failed [❌]"
fi
if  command -v ranger && ! pip3 show ranger_tmux; then
	(
	# check plugins are available

	[[ ! -d ~/repos/ranger_tmux ]] && git clone https://github.com/chi-nik/ranger_tmux.git ~/repos/ranger_tmux
	pip3 install -e ~/repos/ranger_tmux
	python3 -m ranger_tmux --no-tmux install 
	) || echo  "ranger_tmux install failed [❌]"
fi

# zoxide
if ! command -v zoxide ; then
	(
	# might need proxy
	curl -sS https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | bash
	) || echo  "zoxide install failed [❌]"
fi

# ranger-zoxide plugin
if command -v ranger && command -v zoxide && [[ ! -d ~/.config/ranger/plugins/zoxide ]] ; then
	(
	git clone https://github.com/jchook/ranger-zoxide.git ~/.config/ranger/plugins/zoxide
	) || echo  "ranger-zoxide install failed [❌]"
fi
{{ end -}}
